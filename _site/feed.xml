<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-09-29T21:25:22-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">zeskone</title><subtitle>zeskone</subtitle><author><name>GitHub User</name><email>your-email@domain.com</email></author><entry><title type="html">VM Intro</title><link href="http://localhost:4000/vm/2022/08/26/VMIntro.html" rel="alternate" type="text/html" title="VM Intro" /><published>2022-08-26T17:19:23-05:00</published><updated>2022-08-26T17:19:23-05:00</updated><id>http://localhost:4000/vm/2022/08/26/VMIntro</id><content type="html" xml:base="http://localhost:4000/vm/2022/08/26/VMIntro.html"><![CDATA[<h1 id="virtual-machines-vms">Virtual Machines (VMs):</h1>

<p>The usage of VMs is prevalent in the tech world in general, and security is no exception. We frequently use VMs for penetration testing related operating systems, like Kali or Parrot.</p>

<p>You need a few things to get a VM up and running:</p>

<h2 id="1---vm-software">1 - VM Software</h2>

<p>VMWare - <a href="https://www.vmware.com/products/workstation-player.html">https://www.vmware.com/products/workstation-player.html</a></p>

<p>VMWare has a paid version and a free “Workstation Player” version. Follow the link above, scroll to the downloads link at the bottom to download the installation file.</p>

<p>VirtualBox - <a href="https://www.virtualbox.org">https://www.virtualbox.org</a></p>

<p>A free virtual machine solution - it will still have everything you need to get started with installing and using VMs.</p>

<h2 id="2---an-actual-operating-system">2 - An actual operating system</h2>

<p>These two Linux distributions are heavily security-focused and come with a large number of security related tools pre-installed, and many more available in their repositories.</p>

<p>Just make sure to pay attention to whether you’re downloading the VMWare or VirtualBox version of their VM:</p>

<p>Kali - <a href="https://www.kali.org/get-kali/#kali-virtual-machines">https://www.kali.org/get-kali/#kali-virtual-machines</a></p>

<p>Parrot - <a href="https://www.parrotsec.org">https://www.parrotsec.org</a></p>

<p><em>Note that as of August 2022, Parrot requires a manual installation of the OS. If you’re just getting into this for the first time, consider using Kali’s pre-packaged virtual machines, as it will take some of the labor and possible confusion out of the OS setup.</em></p>

<p>You can install any operating system’s .iso file as a VM - such as Ubuntu, Fedora, Windows (Microsoft offers free VMs for Windows), etc. This makes it possible to experiment with different operating systems quickly/easily.</p>

<h2 id="3---install-the-vm-software-and-import-the-vm">3 - Install the VM Software and Import the VM</h2>
<h3 id="installing-the-vm-software">Installing the VM Software:</h3>
<p>Installing the software will be a different process depending on which one you chose, but it should be basically like installing any other software on your system.</p>

<h3 id="import-the-vm">Import the VM</h3>
<p>This will also vary, sorry. It may be as easy as double clicking the VM file in your OS’ file explorer app and it will start the import process right then and there!
Otherwise, you may need to follow the steps the Kali team was kind enough to put together:</p>

<p><a href="https://www.kali.org/docs/virtualization/import-premade-vmware/">https://www.kali.org/docs/virtualization/import-premade-vmware/</a></p>

<p><a href="https://www.kali.org/docs/virtualization/import-premade-virtualbox/">https://www.kali.org/docs/virtualization/import-premade-virtualbox/</a></p>

<h2 id="4---start-it-up">4 - Start it Up!</h2>
<p>Now with your VM Software installed, and VM imported into the software, you can start it up!</p>

<p>In VMware - <strong>Start up this guest operating system</strong></p>

<p>In VirtualBox - click the big green <strong>Start</strong> arrow, or double click the VM on the left side.</p>

<p>You should be all set now and boot into the virtual operating system!
…</p>

<h2 id="5---unless-">5 - Unless …</h2>
<p>If you get an error that seems like something related to virtualization is disabled, well, you have another step to perform.</p>

<p>Example errors are below. Note that the exact wording will be different depending on whether you have an AMD or Intel CPU.</p>

<p>For example, in VMWare:</p>

<p><img src="/images/vmware_virtualerror.png" alt="screen" /></p>

<p>or:</p>

<p><img src="/images/vmware_amdv.png" alt="screen" /></p>

<p>And in Virtualbox:</p>

<p><img src="/images/vbox_virtualerror.png" alt="screen" /></p>

<p>or:</p>

<p><img src="/images/vbox_amdv.png" alt="screen" /></p>

<p>This means that you’ll need to enable virtualization on in your BIOS/UEFI settings. The process for this varies a lot depending on your computer, but you will need to reboot, press some magical key/keys to enter the BIOS/UEFI settings, change a setting, and Save/Exit.</p>

<p>If you bought your computer, do a search for something like “Enable virtualization [your computer name]”.
If you built it, you should do the same, but for your motherboard instead, since there’s no official name for your Frankenstein computer :)</p>]]></content><author><name>GitHub User</name><email>your-email@domain.com</email></author><category term="vm" /><summary type="html"><![CDATA[Virtual Machines (VMs):]]></summary></entry><entry><title type="html">The Hax that Rocks the Cradle CLI Basics</title><link href="http://localhost:4000/thehaxthatrocksthecradle/2022/08/26/thehaxthatrocksthecradle_CLI_basics.html" rel="alternate" type="text/html" title="The Hax that Rocks the Cradle CLI Basics" /><published>2022-08-26T17:19:23-05:00</published><updated>2022-08-26T17:19:23-05:00</updated><id>http://localhost:4000/thehaxthatrocksthecradle/2022/08/26/thehaxthatrocksthecradle_CLI_basics</id><content type="html" xml:base="http://localhost:4000/thehaxthatrocksthecradle/2022/08/26/thehaxthatrocksthecradle_CLI_basics.html"><![CDATA[<h1 id="level-7---ssh-and-file-output">Level 7 - SSH and File Output</h1>
<p>You got another set of credentials - and not for the last time!</p>

<p>Use that to connect to the target host via SSH.</p>

<p>Once you’ve done that, see what files are available to you and see what you can find in the file(s).</p>

<details>
<summary>Level 7 - Hint</summary>

<br />
<span style="color:DodgerBlue">
To the Internet for help once more! I don't suggest this all the time because I'm lazy (that's a possible contributing factor though!), but because this is probably the most valuable skill you can develop - learning how to find more information!
<br />
Some search suggestions to get you moving:<br />
<ul>
<li>SSH usage</li>
<li>show files in Linux</li>
<li>display file contents in Linux</li>
</ul>
</span>
</details>
<p><br /></p>
<details>
<summary>Level 7 - Full Answer</summary>
<br />
<span style="color:MediumSeaGreen">
Kind of similar to FTP, SSH to a server with:
<code>ssh x.x.x.x -l username</code><br />
or<br />
<code>ssh username@x.x.x.x</code><br />
... where x.x.x.x is the IP address of the SSH server.<br />
<br />
<blockquote>The first time you SSH to something, you'll get a warning about the authenticity of the host and fingerprint, and blah, blah, blah. Just type yes at the warning message. What could possibly go wrong with that?</blockquote><br />
Enter the password when prompted.<br />
<br />
To list files, use <code>ls</code>.<br /><br />
To output the contents a file to your screen, type:<br />
<code>cat filename</code><br /><br />
To disconnect from this session, type <code>exit</code>.<br />
</span>
</details>
<p><br /></p>
<h1 id="level-8---directing-change">Level 8 - Directing Change</h1>
<p>The file for this new user is in a directory. Figure out how to get into it!</p>

<details>
<summary>Level 8 - Hint</summary>

<br />
<span style="color:DodgerBlue">
Check out how to <b>change directory in Linux</b> online!
</span>
</details>
<p><br /></p>
<details>
<summary>Level 8 - Full Answer</summary>
<br />
<span style="color:MediumSeaGreen">
Change Directory with the <code>cd</code> command:<br />
<code>cd info</code><br />
<br />
Repeat the steps from Level 7 to get the info for the next user!
</span>
</details>
<p><br /></p>
<h1 id="level-9---hidden-mysteries">Level 9 - Hidden .mysteries</h1>
<p>Same deal as level 8 … almost. You might need to do something a little differently to show <strong>all</strong> the contents of a directory using ls.</p>

<details>
<summary>Level 9 - Hint</summary>

<br />
<span style="color:DodgerBlue">
<code>ls</code> is a command, and has a help file! Remember how to check that from the CLI? Note that for some commands, some of these options might not work, depending on ... a lot of things:<br />
<ul>
<li><code>commandname -h</code></li>
<li><code>commandname --help</code></li>
<li><code>man commandname</code></li>
</ul>
</span>
</details>
<p><br /></p>
<details>
<summary>Level 9 - Full Answer</summary>
<br />
<span style="color:MediumSeaGreen">
Use:<br />
<code>ls -a</code><br />
... to show <b>all</b> directories and files in your current directory, even if they're "hidden".<br />
<br />
You can tell if they are hidden because they have a . in front of the directory or file name. It's like a really little kid playing hide and seek ... "If I put a dot in front of my name, you can't see me, right?!"
</span>
</details>
<p><br /></p>
<h1 id="level-10---from-the-depths">Level 10 - From the Depths</h1>
<p>Here you’ll learn to dig a bit deeper.</p>

<details>
<summary>Level 10 - Hint</summary>

<br />
<span style="color:DodgerBlue">
After reading acidburn's message, see what might help in the <code>ls</code> ... welll, help.
</span>
</details>
<p><br /></p>
<details>
<summary>Level 10 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
Use:<br />
<code>ls -R</code><br />
... to <b>recursively</b> show the contents of the directory. Meaning it'll look in your current directory, and inside any directories in your directory, and any directories inside that ... like a matryoshka doll (those Russian nesting dolls).<br />
<br />
</span>
</details>
<p><br /></p>

<h1 id="level-11---the-matryoshka-squad">Level 11 - The Matryoshka Squad</h1>
<p>Here you’ll learn to dig a bit deeper … and wider? Maybe the shovel you’ve been using needs to be swapped out for another tool.</p>

<details>
<summary>Level 11 - Hint</summary>

<br />
<span style="color:DodgerBlue">
After reading crashoverride's message, take a look at the <code>find</code> help.
<br />
Disclaimer - I personally find the CLI help for <code>find</code> to be ... not so helpful. If you don't find the help you need in <code>find</code>'s help, maybe you'll find that the help you find online will help you use <code>find</code> in a way that helps. Something like that.<br />
<br />
Suggested search: <b>linux find examples</b><br />
<br />
You can also check the manual for <code>find</code> - it's really long, but much more clear to me than the <code>--help</code> information. While we're at it - I might as well mention that you can also find the manual for most commands online really easily too! I like doing that because you can easily use CTRL+f to search on the page for a specific word if you'd like. How do you find the manuals? I typically just use the same words I'd use at the CLI! In this case, just do a search for "man find". This one in particular may come up with unrelated results, but you should also find the manual info too!
</span>
</details>
<p><br /></p>
<details>
<summary>Level 11 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
Use:<br />
<code>find . -name thep*</code><br />
Let's break that down:
<ul>
<li><code>.</code> - the humble period is Linux's shorthand for "this directory". This tells find to look here. Find works recursively by default, so you don't have to tell it to do that like you would with <code>ls</code></li>
<li><code>-name</code> - this tells find that the attribute of the file we're searching by is the name. Of course it's the file name! What else would you search by?! You may be sorry you asked in a bit :)</li>
<li><code>thep*</code> - "thep" is the only piece of the filename that user crashoverride gave us. You have to put the wildcard * after that since you don't know if or how many characters follow that part of the file name.</li>
</ul>
<br />
</span>
</details>
<p><br /></p>
<h1 id="level-12---dont-be-so-sensitive">Level 12 - Don’t Be So Sensitive</h1>
<p>theplague needs some help with this new command!</p>

<details>
<summary>Level 12 - Hint</summary>

<br />
<span style="color:DodgerBlue">
Again, check the <code>find</code> help or online examples.
<br />
<code>find</code> is case sensitive by default - tell it to be the opposite.
</span>
</details>
<p><br /></p>
<details>
<summary>Level 12 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
Use:<br />
<code>find . -iname razor*</code><br />
Let's break that down:
<ul>
<li><code>.</code> - the humble period is Linux's shorthand for "this directory". This tells find to look here. Find works recursively by default, so you don't have to tell it to do that like you would with <code>ls</code></li>
<li><code>-iname</code> - like last time, this tells find that the attribute of the file we're searching by is the name, but the <b>i</b> in <code>iname</code> means to search in a <b>case insensitive</b> manner.</li>
<li><code>razor*</code> - "razor" is the only piece of the filename that user theplague gave us. You have to put the wildcard * after that since you don't know if or how many characters follow that part of the file name.</li>
</ul>
<br />
</span>
</details>
<p><br /></p>
<h1 id="level-13---the-nothingness-you-seek">Level 13 - The Nothingness You Seek</h1>
<p>Now razor needs some help with <code class="language-plaintext highlighter-rouge">find</code>.</p>

<details>
<summary>Level 13 - Hint</summary>

<br />
<span style="color:DodgerBlue">
After checking razor's helpful file* check the <code>find</code> help or online examples.
<br />
* - don't see a file from razor? Remember all the <code>ls</code> options?<br />
<br />
Remember when I said <code>find</code> can search for attributes other than file names, and you were like "Yeah, whatever, when am I ever going to do that?!"
<br />
Now. Now is when you do that!
</span>
</details>
<p><br /></p>
<details>
<summary>Level 13 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
Use:<br />
<code>find . -empty</code><br />
Let's break that down:
<ul>
<li><code>.</code> - the humble period is Linux's shorthand for "this directory". This tells find to look here. Find works recursively by default, so you don't have to tell it to do that like you would with <code>ls</code></li>
<li><code>-empty</code> - this tells the command to look for an empty file.</li>
</ul>
<br />
</span>
</details>
<p><br /></p>
<h1 id="level-14---whats-puters-precious">Level 14 - What’s Puters, Precious?</h1>
<p>razor’s buddy blade needs some help with <code class="language-plaintext highlighter-rouge">find</code> after a run-in with a mysterious creature.</p>

<details>
<summary>Level 14 - Hint</summary>

<br />
<span style="color:DodgerBlue">
After checking blade's tale of what happened, check the <code>find</code> manual or online examples for how to find files belonging to a user.
<br />

</span>
</details>
<p><br /></p>
<details>
<summary>Level 14 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
Use:<br />
<code>find . -user gollum</code><br />
Let's break that down:
<ul>
<li><code>.</code> - the humble period is Linux's shorthand for "this directory". This tells find to look here. Find works recursively by default, so you don't have to tell it to do that like you would with <code>ls</code></li>
<li><code>-user gollum</code> - this tells the command that we're looking for a file owned by a particular user - in this case, it's "gollum".</li>
</ul>
<br />
Now that you have that super long file path, <code>cat</code> it out to see the contents.
Remember (or maybe you're learning this for the first time!) that to copy and paste from the Linux CLI, the keyboard shortcuts are:<br />
<code>CTRL+SHIFT+c</code> - copy<br />
<code>CTRL+SHIFT+v</code> - paste<br />
</span>
</details>
<p><br /></p>
<h1 id="level-15---intelligence-open-sourced">Level 15 - Intelligence, Open Sourced</h1>
<p>Reconnaissance can be done on targets just by querying publicly available sources. This is referred to as Open Source Intelligence (OSINT).</p>

<details>
<summary>Level 15 - Hint</summary>

<br />
<span style="color:DodgerBlue">
You're looking for a book of course, not a movie! <br />
OSINT sometimes depends on you using just the right search terms, but hopefully this one shouldn't be too tricky with the info given by gollum. Give multiple search engines a try, never know what might pull up that specific bit of info you're looking for.
<br />
If you get that piece of info about the story, find a way to show a file's last modified date/time.

</span>
</details>
<p><br /></p>
<details>
<summary>Level 15 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
Using the search term: "first story with Bilbo and Gollum" in a Google search gets you a lot of answers related to the 1937 book, "The Hobbit".
Using that search term in Bing (as of September 2022 anyway) gets you a nice clear-cut answer:
<image src="/images/hobbit.png"></image><br />
<br />
So now you just have to find the file made in 1937! Wow, this computer must be old, huh?
For that, we revisit our old friend <code>ls</code>. The <code>-l</code> option outputs the directory's contents in what they call "list" format, which includes some more info besides just the file names, for example, the last time the file was modified!<br />
<br />
<pre>
gollum@thehaxthatrocksthecradle:~/.treasures$ ls -l
total 280
... [snipped output] ...
-rw-rw-r-- 1 gollum gollum 23 Jul 29  1937 a1d0c6e83f027327d8461063f4ac58a6
</pre>
Now, it's just a matter of copying that file name, and pasting it into a cat command to output its contents!<br />
</span>
</details>
<p><br /></p>
<h1 id="level-16---one-line-to-rule-them-all">Level 16 - One Line to Rule Them All</h1>
<p>Check out what Bilbo has to say - see what you can find out about unique lines in Linux.</p>

<details>
<summary>Level 16 - Hint</summary>

<br />
<span style="color:DodgerBlue">
Check out the <code>uniq</code> command, see if it might give you what you need.

</span>
</details>
<p><br /></p>
<details>
<summary>Level 16 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
Running the <code>uniq</code> command with no options isn't quite enough.<br />
By default, it will just de-duplicate the lines in the file. That still leaves us with a lot (12,595) lines, and doesn't tell us which one was unique to begin with!<br />
<br />
Using the <code>-u</code> option shows us <bold>only</bold> the unique line, and ignores the rest:
<pre>
bilbo@thehaxthatrocksthecradle:~$ uniq -u creds 
99b2a15856249b868abbfc92dea6cee6
</pre>
<br />
Note that this won't work in a file with randomized lines, you'd have to sort the lines first. <code>uniq</code> compares one line with the lines around it. In this case, the duplicates are all one after the other, so <code>uniq</code> works by itself.<br />
</span>
</details>
<p><br /></p>
<h1 id="level-17---searching-for-specific-words">Level 17 - Searching for Specific Words</h1>
<p>We’ve been looking for files so far, but how about stuff inside the files?</p>

<details>
<summary>Level 17 - Hint</summary>

<br />
<span style="color:DodgerBlue">
Check out the <code>grep</code> command, see if it might give you what you need. 
</span>
</details>
<p><br /></p>
<details>
<summary>Level 17 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
The <code>grep</code> command will find whatever "pattern" you feed it in whatever file you specify. The syntax for the most simple usage of the command is:<br />
<code>grep searchterm filename</code><br />
<br />
Since the term we're searching for is "Bombadil", and the file is "fellowship.txt", our command is:
<code>grep Bombadil fellowship.txt</code><br />
<br />
Sample output:<br />
<pre>
frodo@thehaxthatrocksthecradle:~$ grep Bombadil fellowship.txt 
Tom Bom, jolly Tom, Tom Bombadillo!
Old Tom Bombadil water-lilies bringing
here then? Do you know who I am? I'm Tom Bombadil. Tell me what's
</pre>
So now we see that Mr. Bombadil's first name is Tom!
</span>
</details>
<p><br /></p>
<h1 id="level-18---multi-stage-madness">Level 18 - Multi-stage Madness</h1>
<p>This one has a few steps to it, break the problem up into chunks to help you keep track of what you need to do!</p>

<details>
<summary>Level 18 - Hint</summary>

<br />
<span style="color:DodgerBlue">
The steps you'll need to complete this level are:
<ul>
<li>Convert the binary number to decimal - by whatever means necessary!</li>
<li>Use a command to <code>wget</code> the file from the web server.</li>
<li>Find a way to locate a specific line of text in the file, like he <code>sed</code></li>
</ul>
</span>
</details>
<p><br /></p>
<details>
<summary>Level 18 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
The steps fully detailed out are:
<ul>
<li>Convert the binary number to decimal - by whatever means necessary!</li>
<ul>
<li>The simplest way to do this might be to look up a binary to decimal converter online</li>
<li>You can also just figure out the binary yourself if you're into that sort of thing</li>
<li>In any case, you should arrive at the number 278</li>
</ul>
<li>Use a command to <code>wget</code> the file from the web server.</li>
<ul>
<li>In my case, with the target IP address being 10.0.0.19, my command is:<br />
<pre>
wget 10.0.0.19:8000/66f363a6b5353b2cdc28f0b75a94410c/twotowers.txt
--2022-09-12 19:18:15--  http://10.0.0.19:8000/66f363a6b5353b2cdc28f0b75a94410c/twotowers.txt
Connecting to 10.0.0.19:8000... connected.
HTTP request sent, awaiting response... 200 OK
Length: 194068 (190K) [text/plain]
Saving to: ‘twotowers.txt’

twotowers.txt            100%[=================================&gt;] 189.52K  --.-KB/s    in 0.001s  

2022-09-12 19:18:15 (352 MB/s) - ‘twotowers.txt’ saved [194068/194068]
</pre>
</li>
<li>As you see above, this saved the file to a file called twotowers.txt on the local hard drive.</li>
</ul>
<li>Find a way to locate a specific line of text in the file, like he <code>sed</code></li>
<ul>
<li><code>sed</code> can do a lot of things. It can find a specific line in a file, for example.<br />
<pre>
sed -n '278p' twotowers.txt
'Night lies over Isengard,' said Treebeard.
</pre>
</li>
</ul>
</ul>
Now (finally) you have the name of the speaker and the place he talked about!<br />
</span>
</details>
<p><br /></p>
<h1 id="level-19---more-multi-stage-situations">Level 19 - More Multi-stage Situations!</h1>
<p>Get used to it! Some levels from here on in will involve multiple steps - some more than others.</p>

<details>
<summary>Level 19 - Hint</summary>

<br />
<span style="color:DodgerBlue">
The steps you'll need to complete this level are:
<ul>
<li>OSINT for Samwise's wife's nickname</li>
<li>Download the file again if needed</li>
<li>We already used a command to find a specific word or term in a file. How about something near that term, you know, in case you want some context for the line you found?</li>
</ul>
</span>
</details>
<p><br /></p>
<details>
<summary>Level 19 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
The steps fully detailed out are:
<ul>
<li>OSINT for Samwise's wife's nickname - search for something like "samwise gamgee's wife's name" - should yield "rosie"</li>
<li>Download the file again if needed</li>
<li>We already used a command to find a specific word or term in a file. How about something near that term, you know, in case you want some context for the line you found?</li>
<ul>
<li><code>grep</code> can be used to search for lines before <code>-B</code>, after <code>-A</code>, or both <code>-C</code> (for context). Follow up the command option with the number of lines you want to expand your search by.</li>
<li>In our case:<br />
<pre>grep "Chapter 7" twotowers.txt -A3
                          _Chapter 7_  
           Helm's Deep  
  
    The sun was already westering ... [snipped]
</pre></li>
<li>Keep in mind that a blank line (like the one after "Helm's Deep") still counts as a line as far as <code>grep</code> is concerned.</li>
</ul>
</ul>
<br />
</span>
</details>
<p><br /></p>
<h1 id="level-20---switching-it-up-a-bit">Level 20 - Switching It Up a Bit</h1>
<p>Check Rosie’s notes out and again, break this up into chunks to take one step at a time.</p>

<details>
<summary>Level 20 - Hint</summary>

<br />
<span style="color:DodgerBlue">
The steps you'll need to complete this level are:
<ul>
<li>Find the user's name using OSINT</li>
<li>Find the user's password using OSINT</li>
<li>Find a way to switch users in Linux</li>
<li>If needed, figure out how to check out a user's command history in the Linux CLI. You may find a hint there.</li>
</ul>
</span>
</details>
<p><br /></p>
<details>
<summary>Level 20 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
The steps fully detailed out are:
<ul>
<li>Find the user's name using OSINT</li>
<ul>
<li>Search for something like the term given in the file, "lady of the wood of Lothlorien"</li>
<li>You should get "Galadriel"</li>
</ul>
<li>Find the user's password using OSINT</li>
<ul>
<li>S`earch for something like "Galadriel's husband"</li>
<li>You should get "Celeborn"</li>
</ul>
<li>Find a way to switch users in Linux</li>
<ul>
<li><code>su</code> is the command to switch users in Linux. In this case, the command would be<br /></li>
<li><code>su galadriel</code></li>
</ul>
<li>If needed, figure out how to check out a user's command history in the Linux CLI. You may find a hint there.</li>
<ul>
<li><code>history</code> is the command to check the history of the user you're currently logged in as.</li>
</ul>
</ul>
</span>
</details>
<p><br /></p>
<h1 id="level-21---picture-this-">Level 21 - Picture This …</h1>
<p>Check Galadriel’s notes out and again, break this up into chunks to take one step at a time.</p>

<details>
<summary>Level 21 - Hint</summary>

<br />
<span style="color:DodgerBlue">
The steps you'll need to complete this level are:
<ul>
<li>Download the picture of the elf - if you happen to be in an environment where you can't view images on your attacking machine, download it <a href="/images/someelf.jpg">here</a>.</li>
<li>Do a reverse image search to find out the elf's name</li>
<li>Show the running processes in Linux</li>
</ul>
</span>
</details>
<p><br /></p>
<details>
<summary>Level 21 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
The steps fully detailed out are:
<ul>
<li>Download the picture of the elf - if you happen to be in an environment where you can't view images on your attacking machine, check it out <a href="/images/someelf.jpg">here</a>.</li>
<ul>
<li>From the CLI, use wget again: <code>http://targetip:8000/images/someelf.jpg</code></li>
</ul>
<li>Do a reverse image search to find out the elf's name</li>
<ul>
<li>Using Google, the most direct way is to go to https://images.google.com:<br />
<image src="/images/google_imagesearch_start.png"></image><br /></li>
<br />
<li>Upload the image you downloaded and you should get something like:<br />
<image src="/images/google_imagesearch_result.png"></image><br /></li>
<br />
<li>Using Bing, just go to the Bing homepage at https://www.bing.com:<br />
<image src="/images/bing_imagesearch_start.png"></image><br /></li>
<br />
<li>Upload the image you downloaded. While the error message on the right seems to indicate we hit a dead-end, notice that the top of the screen does show the character's name, and even the actress who played the character:<br />
<image src="/images/bing_imagesearch_result.png"></image><br /></li>
</ul>
<li>Show the running processes in Linux</li>
<ul>
<li>The <code>ps</code> command shows running processes. But ... by itself, it's not all that useful for our purpose here. Check the manual (<code>man ps</code>) to see some more options:
<pre>
       To see every process on the system using standard syntax:
          **ps -e**
          **ps -ef**
          **ps -eF**
          **ps -ely**

       To see every process on the system using BSD syntax:
          **ps ax**
          **ps axu**
</pre>
</li>
<li>Running <code>ps -ef</code> or <code>ps auxw</code> will yield something like:
<pre>
galadriel@thehaxthatrocksthecradle:~$ ps auxw
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
... snipped a whole BUNCH of stuff we didn't need ...
... and finally WAAAYYY at the bottom, you see ...
tauriel     2525  0.0  0.0   2888  1048 ?        Ss   20:25   0:00 /bin/sh -c python3 /home/tauriel/alwayswatching.py
tauriel     2527  0.0  0.2  18744  7984 ?        S    20:25   0:00 python3 /home/tauriel/alwayswatching.pyc
</pre>
</li>
<li>The <code>ps</code> command shows processes by other users and their names with the right options enabled as shown here.</li>
<li>Since Galadriel said the password is the file name without the .py, it should be <code>alwayswatching</code>.</li>
</ul>
</ul>
</span>
</details>
<p><br /></p>
<h1 id="level-22---trapping-a-clumsy-target">Level 22 - Trapping a Clumsy Target</h1>
<p>Tauriel is hunting someone and you’ll have to help her set some traps for that target! Get ready to search online for some new commands to perform quite a few steps this time around!</p>

<details>
<summary>Level 22 - Hint</summary>

<br />
<span style="color:DodgerBlue">
The steps you'll need to complete this level are:
<ul>
<li>Show owners for directories in /</li>
<li>Find out how to make a directory in Linux and make one</li>
<li>Make a hidden directory</li>
<li>Make an empty file</li>
<li>Make a hidden empty file</li>
<li>Check the URL given</li>
</ul>
</span>
</details>
<p><br /></p>
<details>
<summary>Level 22 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
The steps fully detailed out are:
<ul>
<li>Show owners for directories in /</li>
<ul>
<li>Use <code>ls</code> and the <code>-l</code> option along with specifically telling the command to look in <code>/</code> instead of your current directory (its default behavior).</li>
<li><pre>
haxy@thehaxthatrocksthecradle:~$ ls -la /
total 945468
...[snipped content]...
drwxr-xr-x   2 tauriel tauriel      4096 Aug  3 20:39 mod
</pre></li>
</ul>
<li>Find out how to make a directory in Linux</li>
<ul>
<li><pre>mkdir free_dinner</pre></li>
<li>If you get no messages in return, it means your command worked - one of those quiet victories, I suppose.</li>
<li>Now you have to wait (no command needed for that, just uhh, take your hands off the keyboard for a minute?) , check the contents directory of the directory you made, and then output the contents of the new file in that directory. Since you're a pro at those things already, I'll leave the steps out.</li>
</ul>
<li>Make a hidden directory in Linux</li>
<ul>
<li>Same command as last time, but you just have to know that a hidden directory or file has a <code>.</code> in front of the file name.</li>
<li><code>mkdir .forest_tea</code></li>
<li>Wait, check directory contents, check file</li>
</ul>
<li>Make an empty file</li>
<ul>
<li><code>touch</code> is used to update the Last Modified Date of a file. If the file doesn't exist though, it makes an empty file with the name you supplied!</li>
<li><code>touch oven</code></li>
<li>Wait, check file contents</li>
</ul>
<li>Make a hidden empty file</li>
<ul>
<li><code>touch</code> is our go-to command again, just use a <code>.</code> to make the file hidden!</li>
<li><code>touch .dwarf_net</code></li>
</ul>
<li>Check the URL given</li>
<ul>
<li>Again, use <code>wget</code>:</li>
<li><code>wget targeturl</code></li>
<li>If you can't view the image on your attacking machine in your environment, replace the http://targetip:8000/images/ in the URL with https://zeskone.github.io/images/ and view it on a device that has web access.</li>
</ul>
</ul>
</span>
</details>
<p><br /></p>]]></content><author><name>GitHub User</name><email>your-email@domain.com</email></author><category term="thehaxthatrocksthecradle" /><summary type="html"><![CDATA[Level 7 - SSH and File Output You got another set of credentials - and not for the last time!]]></summary></entry><entry><title type="html">The Hax that Rocks the Cradle FTP</title><link href="http://localhost:4000/thehaxthatrocksthecradle/2022/08/26/thehaxthatrocksthecradle_FTP.html" rel="alternate" type="text/html" title="The Hax that Rocks the Cradle FTP" /><published>2022-08-26T17:19:23-05:00</published><updated>2022-08-26T17:19:23-05:00</updated><id>http://localhost:4000/thehaxthatrocksthecradle/2022/08/26/thehaxthatrocksthecradle_FTP</id><content type="html" xml:base="http://localhost:4000/thehaxthatrocksthecradle/2022/08/26/thehaxthatrocksthecradle_FTP.html"><![CDATA[<h1 id="level-6---ftp-wdym-lol">Level 6 - FTP? WDYM? LOL!</h1>
<p>Acronyms. Get used to them, you’re bound to be swimming in them in just about any tech related field.</p>

<p>Anyway, remember way back in time when we did that nmap scan of the target host?
See if you can make use of this set of credentials on one of those other ports we found open!</p>

<details>
<summary>Level 6 - Hint</summary>

<br />
<span style="color:DodgerBlue">
FTP - File Transfer Protocol - Running on port 21, this protocol lets you transfer files and stuff. Let's turn to our friend the Internet for some help!<br />
You may want to look up something like a <b>list of FTP commands</b>.<br />
If you find one, then try to find out:<br />
<ul>
<li>How to connect to an FTP server</li>
<li>How to list files</li>
<li>Once you have some filenames available, how do you download it?</li>
</ul>
</span>
</details>
<p><br /></p>
<details>
<summary>Level 6 - Full Answer</summary>
<br />
<span style="color:MediumSeaGreen">
To connect to an FTP server, the command is simply:<br />
<code>ftp x.x.x.x</code><br />
or<br />
<code>ftp username@x.x.x.x</code><br />
... where x.x.x.x is the IP address of the FTP server.<br />
<br />
Enter the password when prompted. <i>If you're new to CLI environments, note that the password won't show anything on screen when you type, so type carefully or be prepared to hit backspace a ton of times! (No, I don't know that from experience, why do you ask?)</i><br />
<br />
To list files, use <code>ls</code> or <code>dir</code>.<br /><br />
To download a file, type:<br />
<code>get filename</code><br /><br />
Then quit FTP with the word <code>quit</code>.<br />
Example below:<br />
<image src="/images/ftp.png"></image>
<br /><br />
If you're using a CLI environment on your attacking machine and, again, you're new to it and not sure what to do next ...<br />
<code>ls</code> - to view the files in your current directory<br />
<code>cat sshcreds.txt</code> - to output the contents of the file<br />
<br />
You'll be using these commands quite a few times in the coming steps!<br />
</span>

</details>
<p><br /></p>]]></content><author><name>GitHub User</name><email>your-email@domain.com</email></author><category term="thehaxthatrocksthecradle" /><summary type="html"><![CDATA[Level 6 - FTP? WDYM? LOL! Acronyms. Get used to them, you’re bound to be swimming in them in just about any tech related field.]]></summary></entry><entry><title type="html">The Hax that Rocks the Cradle Web</title><link href="http://localhost:4000/thehaxthatrocksthecradle/2022/08/26/thehaxthatrocksthecradle_Web.html" rel="alternate" type="text/html" title="The Hax that Rocks the Cradle Web" /><published>2022-08-26T17:19:23-05:00</published><updated>2022-08-26T17:19:23-05:00</updated><id>http://localhost:4000/thehaxthatrocksthecradle/2022/08/26/thehaxthatrocksthecradle_Web</id><content type="html" xml:base="http://localhost:4000/thehaxthatrocksthecradle/2022/08/26/thehaxthatrocksthecradle_Web.html"><![CDATA[<p>For this (and all the challenges to come) to work, you need to have your attacking machine up and running, as well as the “victim” virtual machine.</p>

<h1 id="level-1---finding-your-target-ip-address">Level 1 - Finding Your Target IP Address</h1>
<p>If you just started up the VM, you don’t necessarily know the IP address it’s using. 
If you found out by some other sneaky way … uh … forget it? Let’s start over!</p>

<p><code class="language-plaintext highlighter-rouge">nmap</code> is a tool that does ping sweeping, port scanning, all sorts of good enumeration stuff.
Use nmap to run a “ping scan” of the network the vm is on. If you don’t know how, check the nmap help file, which is conveniently displayed if you just type <code class="language-plaintext highlighter-rouge">nmap</code> and hit enter.</p>

<blockquote>
  <p>BIG HINT: For most commands, to get the help menu, you’ll use something like:</p>

  <ul>
    <li>
      <p><code class="language-plaintext highlighter-rouge">commandname -h</code> or</p>
    </li>
    <li>
      <p><code class="language-plaintext highlighter-rouge">commandname --help</code></p>
    </li>
  </ul>
</blockquote>

<p>If you got it working, the results show the addresses of all the machines on the network you specified. In some cases, it will show the addresses and the name next to it! Something like:</p>

<p><code class="language-plaintext highlighter-rouge">Nmap scan report for thehaxthatrocksthecradle (xx.xx.xx.xx)</code></p>

<p><br /></p>

<p>In some cases though, it won’t. If you have that issue, there are a couple other things you can try:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">ping thehaxthatrocksthecradle.local</code>
  The address you get the reply from is your victim/target VM.</li>
  <li>Do a <code class="language-plaintext highlighter-rouge">port scan</code> for port 21143 on your local network and see which machine has this open. This should be your target VM - unless you have another computer with that port open, which would be kind of odd - like, very odd.</li>
</ul>

<p><br />
Keep this IP address handy! You’ll need it for a lot of the coming steps.</p>

<blockquote>
  <p>Actually, now’s a good time to start up some note-taking! For future steps, you’ll need to keep track of the username and password you last discovered so you can pick up where you left off. It’s also a good idea to track any new stuff you’ve learned along the way!</p>
</blockquote>

<p><br /></p>
<blockquote>
  <p>Each level will have a <strong>Full Answer</strong> toggle (like the one below) and maybe a <strong>Hint</strong> one preceding it. Give it a good try before clicking the toggle! The help is there if you need it though.</p>
</blockquote>

<details>
<summary>Level 1 - Full Answer</summary>
<br />
<span style="color:MediumSeaGreen">
If your IP address scheme for your network is 192.168.0.xxx, your nmap ping scan would be: <br />
<code>nmap -sn 192.168.0.-</code> 
<br />(the dash tells nmap "Fill this in with all possible values")
<br />
</span>

</details>

<p><br /></p>
<h1 id="level-2---finding-an-open-web-port">Level 2 - Finding an Open Web Port</h1>
<p>Now that you’ve found the IP address, run a port scan on the machine, just using nmap’s default “common” ports. This is actually deceptively simple to do, so maybe just use the best resource ever - the Internet, and look up something like “nmap port scan”.</p>

<p>This nmap scan should come back with a port that nmap says is <code class="language-plaintext highlighter-rouge">http-alt</code>. In other words, a web site! Maybe? Let’s check it out!</p>

<p><br /></p>
<details>
<summary>Level 2 - Full Answer</summary>
<br />
<span style="color:MediumSeaGreen">
<code>nmap your.target.ip.address</code> <br />
For example, if your target IP is 10.0.0.50, your command would be:<br />
<code>nmap 10.0.0.50</code> 
<br />
You should see something a lot like:<br />
<image src="/images/initial_nmap.png"></image>
<br />
</span>

</details>
<p><br /></p>
<h1 id="level-3---find-a-hidden-directory-and-file">Level 3 - Find a Hidden Directory and File</h1>
<p>First, navigate to the website by just entering the IP address and port in your browser in this format:</p>

<p><code class="language-plaintext highlighter-rouge">ip.ad.dr.ess:port</code></p>

<p>For example, for target address 10.0.0.50 and port 1234, just type:</p>

<p><code class="language-plaintext highlighter-rouge">10.0.0.50:1234</code></p>

<p>You should get something like:</p>

<p><img src="/images/site_initial_page.png" alt="screen" /></p>

<p><br /></p>

<p>Most websites want you to find their content. What if one had contents that they didn’t necessarily want to show to everyone, but still have it be available to others. How would you find that content?</p>

<p>If a site followed an easy pattern like this, it would be easy:</p>
<ul>
  <li>github.com/page1</li>
  <li>github.com/page2</li>
</ul>

<p>Well, we’d just guess using “page” followed by numbers all the way up, right?</p>

<p>First of all, if they’re using regular words, that makes things much more complicated! We need a <strong>list</strong> of <strong>words</strong> to try. Known in shady hacking circles by the ominous term, a … <strong>wordlist</strong>. You can make one (and you will, in later levels if you continue on), but there are a bunch already made for you!</p>

<p>Kali and Parrot will come with some in their file system already. For example, this one here:
<code class="language-plaintext highlighter-rouge">/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt</code></p>

<p>If not, you can download it here:</p>

<p><a href="https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/Web-Content/directory-list-2.3-small.txt">directory-list-2.3-small.txt</a></p>

<p>Secondly, that’s a lot of typing. No one wants to do that. How about a tool to help you do that? There are a few different options out there. We’ll use <code class="language-plaintext highlighter-rouge">ffuf</code>.
To check if you have it, just type <code class="language-plaintext highlighter-rouge">ffuf</code> at a command prompt on your attacking machine.
If you get a long help menu, congrats, you have it!</p>

<p>If not, you have to install it. In Kali or Parrot:</p>

<p><code class="language-plaintext highlighter-rouge">sudo apt update</code></p>

<p><code class="language-plaintext highlighter-rouge">sudo apt install ffuf</code></p>

<p>Now use ffuf along with that wordlist above to find a directory AND an html file in that directory that has some more information for you!</p>

<p><br /></p>
<details>
<summary>Level 3 - Hint</summary>

<br />
<span style="color:DodgerBlue">
Check out ffuf's help menu (get used to doing this for all sorts of commands!)
Specifically, look for how to specify your <b>wordlist file path</b>, <b>target URL</b>, how to search <b>recursively</b>, how to scan for a specific <b>extension</b>, and maybe <b>ignore wordlist comments</b>, since our wordlist has comments at the beginning.
<br />
<br />
The directory and file we're looking for both have hacking/security related names, btw. You'll find others, but can disregard them for now.
<br />
<br />
</span>
</details>
<p><br /></p>
<details>
<summary>Level 3 - Full Answer</summary>
<br />
<span style="color:MediumSeaGreen">
Let's combine all the requirements mentioned in the hint based on ffuf's help file. When dealing with new commands, I like to do this on multiple lines, to help visually understand it better, and track my progress. Then I mush it all together:<br />
<br />
<code>ffuf</code> - our command<br />
<code>-w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt</code>  - the wordlist (adjust if yours is somewhere else)<br />
<code>-u http://target.ip.add.ress:8000/FUZZ</code>  - our target URL, followed by FUZZ where we want ffuf to fill in the gaps<br />
<code>-recursion </code> - to search recursively (this can extend scan times significantly, so be careful with this when scanning using large lists)<br />
<code>-e .html </code> - since we're looking for an html file<br />
<code>-ic</code>  - ignore wordlist comments just to make results cleaner<br />
Some options I like to throw in as well:<br />
<code>-c</code>  - colorize output<br />
<code>-v</code>  - verbose output<br />
<br />
Put it all together and you get:
<code>ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -u http://192.168.254.175:8000/FUZZ -recursion -e .html -ic -c -v</code> 
<br />
You should see:<br />
<image src="/images/ffuf1.png"></image>
<br />
... and scroll down in the results to find ... <br />
<image src="/images/ffuf2.png"></image>
<br />
</span>

</details>
<p><br /></p>

<h1 id="level-4---finding-sneaky-information">Level 4 - Finding Sneaky Information</h1>
<p>There are ways to hide information even on a single web page. Take a close look at what’s on this page and see if there might be more to it than meets the eye initially.</p>

<details>
<summary>Level 4 - Hint</summary>

<br />
<span style="color:DodgerBlue">
Do you see how the page says:<br />
<b>This concealment will certainly <i>highlight</i> their weaknesses.</b>
<br />
<br />
</span>
</details>
<p><br /></p>
<details>
<summary>Level 4 - Full Answer</summary>
<br />
<span style="color:MediumSeaGreen">
Highlight everything on the page!<br />
You can do this by clicking/dragging, or pressing CTRL+a to Select All<br />
This was just a matter of text being the same color as the background. Simple, but this trick is used sometimes to hide text on pages. Why? Sometimes for SEO (Search Engine Optimization), sometimes by shady characters wanting to hide links on pages they gained illicit access to.
</span>
</details>
<p><br /></p>

<h1 id="level-5---finding-more-sneaky-information">Level 5 - Finding More Sneaky Information</h1>
<p>This page also has more to it than meets the eye. It’s stored a little differently though.</p>

<details>
<summary>Level 5 - Hint</summary>

<br />
<span style="color:DodgerBlue">
The HTML used for web pages may have more information in the source file than you see when you get to it on a browser. There are different reasons for this - for one, it's kind of messy looking to the casual web user. Two, maybe the developers want to be able to leave <b>HTML comments</b> in the page to kind of leave notes to themselves or each other? Hmm...<br />
<br />
</span>
</details>
<p><br /></p>
<details>
<summary>Level 5 - Full Answer</summary>
<br />
<span style="color:MediumSeaGreen">
The method for viewing HTML source code might differ for your browser.<br />
<ul>
Right click &gt; View Page Source<br />
Right click &gt; Developer Tools &gt; View Page Source<br />
CTRL+u<br />
</ul>
Something along those lines should work for you.
Check the source of the page and you should see something like:<br />
<code>
&lt;!--<br />
FTP<br />
user:lordnikon<br />
pass:gotanewputer<br />
--&gt;
</code>
</span>
</details>
<p><br />
So what is this new piece of info we just found? Read on to find out!</p>]]></content><author><name>GitHub User</name><email>your-email@domain.com</email></author><category term="thehaxthatrocksthecradle" /><summary type="html"><![CDATA[For this (and all the challenges to come) to work, you need to have your attacking machine up and running, as well as the “victim” virtual machine.]]></summary></entry><entry><title type="html">The Hax that Rocks the Cradle Brute Force</title><link href="http://localhost:4000/thehaxthatrocksthecradle/2022/08/26/thehaxthatrocksthecradle_brute_force.html" rel="alternate" type="text/html" title="The Hax that Rocks the Cradle Brute Force" /><published>2022-08-26T17:19:23-05:00</published><updated>2022-08-26T17:19:23-05:00</updated><id>http://localhost:4000/thehaxthatrocksthecradle/2022/08/26/thehaxthatrocksthecradle_brute_force</id><content type="html" xml:base="http://localhost:4000/thehaxthatrocksthecradle/2022/08/26/thehaxthatrocksthecradle_brute_force.html"><![CDATA[<p><br /></p>
<h1 id="level-35---this-ones-not-about-brute-force">Level 35 - This One’s Not About Brute Force!</h1>
<p>Ok, so the rest of these levels will involve brute forcing, but this one doesn’t. I just didn’t want to have a whole separate page for this one. \(o_O)/
<br />Sekhmet, in all her anger about Mafdet, also found some other account info!</p>

<details>
<summary>Level 35 - Hint</summary>

<br />
<span style="color:DodgerBlue">
Find out how to make a file executable in Linux.
</span>
</details>
<p><br /></p>
<details>
<summary>Level 35 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
Linux doesn't let you run/execute a program unless the file specifically has the permissions set up to do so. Check the permissions with <code>ls -la</code>:
<pre>
sekhmet@thehaxthatrocksthecradle:~$ ls -la runthisthing 
-rw-rw-r-- 1 sekhmet sekhmet 16744 Apr  2  2021 runthisthing
</pre>
<br />
The file permissions are all those letters/symbols at the beginning of the second line, to the left of the number 1. But how do you read all that mess? To fully understand it would require a long explanation, so let's just go with the basics for now and explain it all with some handy color-coding.<br />
<br />
<code>
<span style="color:purple">-</span>
<span style="color:DarkOrange">rw-</span>
<span style="color:DarkSlateBlue">rw-</span>
<span style="color:DeepPink">r--</span>
 1 
 <span style="color:DarkOrange">sekhmet </span>
<span style="color:DarkSlateBlue"> sekhmet </span>
 16744 Apr  2  2021 runthisthing</code><br />
<br />
<span style="color:purple"><code>-</code> - This will typically just be a <code>-</code> if it's a file or a letter <code>d</code> if it's a directory. Ours is a file, we don't need anything else from it here.</span><br />
<span style="color:DarkOrange"><code>rw-</code> - This indicates that the owner of the file can read it and write to it. A letter means the permission is present, a dash means that permission is not present. The owner in this case is our buddy Sekhmet (the first <code>sekhmet</code> is the owner)</span> <br />
<span style="color:DarkSlateBlue"><code>rw-</code> - Same thing here, but this is for the owning group. The second <code>sekhmet</code> is the owning group. We can see that the sekhmet group can also read and write to the file</span><br />
<span style="color:DeepPink"><code>r--</code> - These are the permissions for everyone else. Everyone can read the file, but they can't write to it.</span><br />
<br />
So now what? Well, we want to add <b>execution</b> permissions to the file, which would be represented by an <code>x</code> instead of the <code>-</code> in the third column for each permission set. The easiest way to do that would be:<br />
<code>chmod +x runthisthing</code><br />
<br />
This adds the <code>x</code> to all the permissions for this file. Note that this means everyone can execute this file now! You can get more granular, but we're just going for quick and easy right now.<br />
<br />
Check the permissions after running that and they should be:<br />
<pre>
sekhmet@thehaxthatrocksthecradle:~$ ls -la runthisthing 
-rwxrwxr-x 1 sekhmet sekhmet 16744 Apr  2  2021 runthisthing
</pre>
<br />
Ok, so now you can allegedly execute this file. Right. Let's do that now.<br />
How?<br />
<br />
To run an executable file in the directory you're currently in at the CLI:<br />
<pre>./runthisthing
                                                 &gt;=&gt;                    
                                                 &gt;=&gt;                    
  &gt;==&gt;    &gt;=&gt;   &gt;=&gt;   &gt;==&gt;       &gt;==&gt; &gt;=&gt;  &gt;=&gt; &gt;=&gt;&gt;==&gt; &gt;=&gt;  &gt;=&gt;  &gt;===&gt;  
&gt;&gt;   &gt;=&gt;    &gt;&gt; &gt;=&gt;  &gt;&gt;   &gt;=&gt;   &gt;=&gt;    &gt;=&gt;  &gt;=&gt;   &gt;=&gt;   &gt;=&gt;  &gt;=&gt; &gt;=&gt;     
&gt;&gt;===&gt;&gt;=&gt;    &gt;&gt;     &gt;&gt;===&gt;&gt;=&gt; &gt;=&gt;     &gt;=&gt;  &gt;=&gt;   &gt;=&gt;   &gt;=&gt;  &gt;=&gt;   &gt;==&gt;  
&gt;&gt;         &gt;&gt;  &gt;=&gt;  &gt;&gt;         &gt;=&gt;    &gt;=&gt;  &gt;=&gt;   &gt;=&gt;   &gt;=&gt;  &gt;=&gt;     &gt;=&gt; 
 &gt;====&gt;   &gt;=&gt;   &gt;=&gt;  &gt;====&gt;      &gt;==&gt;   &gt;==&gt;=&gt;    &gt;=&gt;    &gt;==&gt;=&gt; &gt;=&gt; &gt;=&gt; 
                                         
You have executed the program as required
Decode for the password:
ZXhlY3V0aXZlT3JkZXJz
</pre><br />
These people and their encoding!! (╯°□°）╯︵ ┻━┻)<br />
Decode as usual from base64:<br />
<pre>
└─$ hURL -b ZXhlY3V0aXZlT3JkZXJz           

Original string       :: ZXhlY3V0aXZlT3JkZXJz
base64 DEcoded string :: executiveOrders
</pre>

<i>There's a lot more to permissions that I didn't cover - you can certainly find more info online, such as here: <a href="https://linuxhandbook.com/linux-file-permissions/">https://linuxhandbook.com/linux-file-permissions/</a></i>
</span>
</details>
<p><br /></p>
<h1 id="level-36---this-one-is-about-brute-force-what-does-that-mean-anyway">Level 36 - This One is About Brute Force! What Does That Mean Anyway?</h1>
<p>Let’s get into some password attacks!
A short/quick definition of brute forcing an account would be going through a bunch of guesses for the password for the account. There are a few different types.</p>

<p>A true brute force, or key space brute force is the most … brutish of them all. For example - we did just that in the earlier examples. Our key space was just 26 letters at first (26 guesses), then 2 digit numbers (100 guesses), then 4 digit numbers. That last one took us up to 10,000 possible guesses (0000-9999). What if we add lowercase letters to that mix?
We’d be up to 1,679,616 guesses. You can see how this starts to get impractical pretty quickly. Enter the dictionary attack!</p>

<p>A dictionary attack uses a list of likely passwords. Where does that list come from? Could be any of a variety of places:</p>
<ul>
  <li>a breach of a company’s database</li>
  <li>a compilation of words from a website the victim frequents</li>
  <li>a list of commonly used passwords</li>
  <li>a list you sat there typing up by hand because … you were working on your typing skills, maybe?</li>
</ul>

<p>This type of attack relies on someone using something in your list as their password, so the art of getting a list together is another subject that could make for a book by itself. We will instead take advantage of someone else’s work and use a pre-existing list.</p>

<details>
<summary>Level 36 - Hint</summary>

<br />
<span style="color:DodgerBlue">
Your steps for this level:
<ul>
<li>Download the password list</li>
<li>Find a way to perform a brute force password attack against SSH - hint for the hint, look up how to do it with Patator. Hint for that - honestly, just check out patator's awesome help menu from the command line!</li>
<li>Perform the SSH password attack</li>
</ul>
</span>
</details>
<p><br /></p>
<details>
<summary>Level 36 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
Your steps for this level:
<ul>
<li>Download the password list</li>
<ul>
<li><code>wget https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Leaked-Databases/rockyou-15.txt</code><br />
This is a cut down version of a very well known password list. This GitHub repository has a ton of lists for trying to discover/crack all sorts of stuff including usernames, passwords, directories, and more!</li>
</ul>
<li>Find a way to perform a password attack against SSH</li>
<ul>
<li>I'll be using Patator in this case, but there are other applications you could use instead.</li>
<li>If you checked out the tool's help (like I said you should!!) you might have seen something like:
<pre>
└─$ patator --help          
Patator 0.9 (https://github.com/lanjelot/patator) with python-3.10.7
Usage: patator module --help

Available modules:
  + ftp_login     : Brute-force FTP
  + ssh_login     : Brute-force SSH
  + telnet_login  : Brute-force Telnet
... etc
</pre>
Then check out the module specific help:
<pre>
└─$ patator ssh_login --help
Patator 0.9 (https://github.com/lanjelot/patator) with python-3.10.7
Usage: ssh_login &lt;module-options ...&gt; [global-options ...]

Examples:
  ssh_login host=10.0.0.1 user=root password=FILE0 0=passwords.txt -x ignore:mesg='Authentication failed.'

Module options:
  host          : target host
  port          : target port [22]
  user          : usernames to test
  password      : passwords to test
  auth_type     : type of password authentication to use [password|keyboard-interactive|auto]
  keyfile       : file with RSA, DSA or ECDSA private key to test
  persistent    : use persistent connections [1|0] 
</pre>
From the example given and the option descriptions, we can start filling in our environment's info as seen in the next step.
</li>
</ul>
<li>Perform the SSH password attack</li>
<ul>
<li><pre>
└─$ patator ssh_login host=10.0.0.19 user=brutus password=FILE0 0=rockyou-15.txt
21:14:26 patator    INFO - Starting Patator 0.9 (https://github.com/lanjelot/patator) with python-3.10.7 at 2022-09-29 21:14 CDT
21:14:26 patator    INFO -                                                                              
21:14:26 patator    INFO - code  size    time | candidate                          |   num | mesg
21:14:26 patator    INFO - -----------------------------------------------------------------------------
21:14:29 patator    INFO - 1     22     3.506 | 123456                             |     1 | Authentication failed.
21:14:29 patator    INFO - 1     22     3.497 | 12345                              |     2 | Authentication failed.
21:14:29 patator    INFO - 1     22     3.506 | 123456789                          |     3 | Authentication failed.
21:14:29 patator    INFO - 1     22     3.502 | iloveyou                           |     5 | Authentication failed.
21:14:30 patator    INFO - 1     22     3.524 | password                           |     4 | Authentication failed.
21:14:30 patator    INFO - 1     22     3.508 | princess                           |     6 | Authentication failed.
21:14:30 patator    INFO - 1     22     3.501 | 1234567                            |     7 | Authentication failed.
21:14:30 patator    INFO - 1     22     3.505 | 12345678                           |     8 | Authentication failed.
21:14:30 patator    INFO - 1     22     3.501 | abc123                             |     9 | Authentication failed.
21:14:30 patator    INFO - 1     22     3.501 | nicole                             |    10 | Authentication failed.
21:14:33 patator    INFO - 1     22     3.496 | daniel                             |    11 | Authentication failed.
</pre>
</li>
<li>I left off the <code>-x ignore:mesg="Authentication failed."</code> in this example just so you could see the process as it tries guessing all the different passwords. You can add that to the end of the command to make the output cleaner. Note that it will look like it's not doing anything for a while if you do that.</li>
<li>...or leave it as is and just scroll through the output a bit to find ...<br />
<pre>
...
21:19:16 patator    INFO - 1     22     3.500 | jessie                             |   215 | Authentication failed.
21:19:16 patator    INFO - 0     30     0.111 | hellokitty                         |   216 | SSH-2.0-OpenSSH_8.9p1 Ubuntu-3
21:19:16 patator    INFO - 1     22     3.495 | jeremy                             |   207 | Authentication failed.
...
</pre>
</li>
<li>The successful login attempt will just show the SSH version on the server in this case.</li>
</ul>
</ul>
</span>
</details>
<p><br /></p>
<h1 id="level-37---this-one-is-about-brute-force">Level 37 - This One is About Brute Force!</h1>

<details>
<summary>Level 37 - Hint</summary>

<br />
<span style="color:DodgerBlue">
Your steps for this level:
<ul>
<li></li>
</ul>
</span>
</details>
<p><br /></p>
<details>
<summary>Level 37 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">

</span>
</details>
<p><br /></p>]]></content><author><name>GitHub User</name><email>your-email@domain.com</email></author><category term="thehaxthatrocksthecradle" /><summary type="html"><![CDATA[Level 35 - This One’s Not About Brute Force! Ok, so the rest of these levels will involve brute forcing, but this one doesn’t. I just didn’t want to have a whole separate page for this one. \(o_O)/ Sekhmet, in all her anger about Mafdet, also found some other account info!]]></summary></entry><entry><title type="html">The Hax that Rocks the Cradle Cats and Snakes</title><link href="http://localhost:4000/thehaxthatrocksthecradle/2022/08/26/thehaxthatrocksthecradle_cats_and_snakes.html" rel="alternate" type="text/html" title="The Hax that Rocks the Cradle Cats and Snakes" /><published>2022-08-26T17:19:23-05:00</published><updated>2022-08-26T17:19:23-05:00</updated><id>http://localhost:4000/thehaxthatrocksthecradle/2022/08/26/thehaxthatrocksthecradle_cats_and_snakes</id><content type="html" xml:base="http://localhost:4000/thehaxthatrocksthecradle/2022/08/26/thehaxthatrocksthecradle_cats_and_snakes.html"><![CDATA[<p><br /></p>
<h1 id="level-31---the-cats-out-of-the-net">Level 31 - The Cat’s Out of the Net</h1>
<p>Tinytina’s alter-ego, Crunkbunny is now offering a way for you to get a mysterious cat’s creds.</p>

<details>
<summary>Level 31 - Hint</summary>

<br />
<span style="color:DodgerBlue">
Check out usage information for <code>netcat</code>. This is another utility where, honestly, the <code>--help</code> leaves me ... not helped. Maybe check the <code>man</code> for it or find some help online.
</span>
</details>
<p><br /></p>
<details>
<summary>Level 31 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
It may be worth pointing out that people very often us <code>nc</code> as the command for <code>netcat</code>. So often in fact, that I <i>just</i> found out right now that you can use the full word <code>netcat</code> - at least in current versions of Kali and Ubuntu. Who knew? (not me, apparently).<br />
<br />
Once you know the command to use, the syntax for <code>nc</code> is pretty simple:
<code>nc ipaddress portnum</code><br />
<br />
If you were connecting to IP 1.2.3.4 at port 9876, it would be:<br />
<code> nc 1.2.3.4 9876</code><br />
Or to get a little more detail:<br />
<code> nc -nv 1.2.3.4 9876</code><br />
<br />
Try that first! - substituting the IP and port that you are connecting to.<br />
<br />
If you tried it, you might be saying "Well, now what?". This is all I got:<br />
<pre>
┌──(kali㉿kali)-[~]
└─$ nc -nv 10.0.0.19 21141
(UNKNOWN) [10.0.0.19] 21141 (?) open

</pre>
<br />
See all that nothingness after the nc command where I should be getting somethingness?!<br />
<br />
Remember that Crunkbunny said:<br />
<code>If you use netcat to send a certain favorite word of mine ("kaboom" of course) to a certain port (21141) on this machine...</code><br />
<br />
So how do you send a word using <code>netcat</code>? The simplest way would be to connect, as you did above, type in the word, and hit Enter!
</span>
</details>
<p><br /></p>
<h1 id="level-32---penguins-and-kitties-and-snakes-oh-my">Level 32 - Penguins and Kitties and Snakes, Oh My!</h1>
<p>Netkitty1, the first netkitty ever (whatever that means) needs your help! This time, she’s automated the netcat process, but needs you to fill in a couple gaps. Let’s see how!</p>

<details>
<summary>Level 32 - Hint</summary>

<br />
<span style="color:DodgerBlue">
You have some steps to perform here:<br />
<ul>
<li>Decode the username</li>
<li>Download the Python script</li>
<li>Edit the Python script</li>
<li>Run the Python script (might need to search for how to do this online)</li>
</ul>
</span>
</details>
<p><br /></p>
<details>
<summary>Level 32 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
You have some steps to perform here:<br />
<ul>
<li>Decode the username</li>
<ul>
<li><code>hURL -b YmFzdGV0</code></li>
<li> ... or use <a href="https://cyberchef.org">CyberChef</a> or a similar online resource</li>
<li> to get the username: bastet</li>
</ul>
<li>Download the Python script</li>
<ul>
<li><code>wget targetip:65534/hack_the_cat.py</code></li>
<li><i>You may have noticed that we're just downloading the Python file in netkitty1's home directory. You could technically <code>cat</code> out the file, highlight the text, copy, paste in to a new file on your machine, save that and go from there. While that may seem most comfortable at first, I recommend you try this CLI way instead. Once you get the hang of it, you may find it can save time in situations like this!</i></li>
</ul>
<li>Edit the Python script</li>
<ul>
<li>Now that it's on your local machine, you can edit the script using any number of text editing apps.</li>
<li>I'd recommend something that does syntax highlighting (color codes the program's syntax to make it easier to edit stuff). If you want to be able to do it graphically (so you can use your mouse to edit), I'd recommend VS Code or its open-source alternative code-oss. You don't need all its features for our usage here, but it might be good to be familiar with the app nonetheless.</li>
<li>Try running <code>code-oss</code> from within Kali to see if you have it installed.<br />
If not, you can use any other text editor for now.
</li>
<li>netkitty1 marked the area where you need to edit the script. When you're done, that section should look something like this (of course, replace the target IP address to suit your environment):<br />
<image src="/images/netkitty1_codeoss.png"></image>
</li>
<li>Remember to save your changes!</li>
</ul>
<li>Run the Python script</li>
<ul>
<li>Make sure you're at the CLI in the same location as the script file and run: <code>python hack_the_cat.py</code><br />
<i>note that on some systems you might need to run it using <code>python3 hack_the_cat.py</code></i></li>
<li>You should see something like:<br />
<image src="/images/netkittyhax1.png"></image></li>
<li>It will continue until eventually, it gets to:<br />
<image src="/images/netkittyhax2.png"></image></li>
<li>Did ... did we just get <i>another</i> step?</li>
</ul>
<li>Yes, we did</li>
<ul>
<li>Use OSINT to find out bastet's home city and you should come across something like this Wikipedia article naming Bubastis as the city (remember the password is all lowercase):
<image src="/images/bastet_home.png"></image></li>
</ul>
</ul>
</span>
</details>
<p><br /></p>
<h1 id="level-33---rock--roll">Level 33 - Rock &amp; Roll</h1>
<p>Bastet has asked for your aid, will you answer?</p>

<details>
<summary>Level 33 - Hint</summary>

<br />
<span style="color:DodgerBlue">
Similar to last time - kind of:
<ul>
<li>Find the username (remember waaay back in the day when you found a specific piece of text in a text file?)</li>
<li>Download the Python script</li>
<li>Edit the Python script</li>
<li>Run the Python script</li>
</ul>
</span>
</details>
<p><br /></p>
<details>
<summary>Level 33 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
Similar to last time - kind of:
<ul>
<li>Find the username (remember waaay back in the day when you found a specific piece of text in a text file?)</li>
<ul>
<li>I won't go into details here, since we've covered <code>grep</code> before:<br />
<code>grep mafdet forgersandforgeries.txt</code></li>
</ul>
<li>Download the Python script</li>
<ul>
<li><code>wget targetip:65530/hackmafdet.py</code></li>
</ul>
<li>Edit the Python script</li>
<ul>
<li>This one requires one more step, editing a Python range.</li>
<li>Python ranges can be defined with just one number, the endpoint. Python will assume you want all the numbers from 0 to that number.</li>
<li>BUT!!!! Note that if you were to, for example give 10 as the range with:<br /> <code>range(10)</code><br />
...Python would count from 0 to 9. That range stop parameter is what they call "exclusive" and is the same as saying:<br />
<code>range(up to, but not including this number here)</code><br /></li>
<li>In our example, then, the edit should look like:<br />
<image src="/images/hackmafdet.png"></image>
</li>
</ul>
<li>Run the Python script</li>
<ul>
<li>Same as before:<br />
<code>python hackmafdet.py</code><br />
</li>
<li>After some waiting around, you should see...<br />
<image src="/images/mafdetrocks_pwhint.png"></image></li>
</ul>
<ul>
<li>ANOTHER STEP?! These cats, I tell you ...</li>
<li>Check the MD5 hash in a hash lookup tool:<br />
<image src="/images/mafdetrocks_hashlookup.png"></image></li>
</ul>
</ul>
</span>
</details>
<p><br /></p>
<h1 id="level-34---pin">Level 34 - PIN</h1>
<p>Mafdet, the music fan, ran across an account to hack. Similar to the last few, with a bit of a twist.</p>

<details>
<summary>Level 34 - Hint</summary>

<br />
<span style="color:DodgerBlue">
Similar to last time - kind of:
<ul>
<li>Username is given</li>
<li>Download the Python script</li>
<li>Edit the Python script</li>
<li>Run the Python script, BUT save the Python script output to a file</li>
<li>Find some magical way to search through the output</li>
</ul>
</span>
</details>
<p><br /></p>
<details>
<summary>Level 34 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
Similar to last time - kind of:
<ul>
<li>Username is given: sekhmet</li>
<li>Download the Python script</li>
<ul>
<li><code>wget targetip:65521/hacksekhmet.py</code></li>
</ul>
<li>Edit the Python script.<br />
When you're done, it should look something like:<br />
<image src="/images/hacksekhmet.png"></image></li>
<br />
<li>Run the Python script, BUT save the Python script output to a file
There are multiple ways to do this, I'll cover two here:<br />
</li>
<ul>
<li><code>python hacksekhmet.py &gt; hacksekhmetoutput.txt</code><br />
The <code>&gt;</code> redirects a command's output from <b>stdout</b> (outputting at the CLI screen) to a file of your choosing - in this case, <b>hacksekhmetoutput.txt</b>. If the file doesn't exist, this command will create it. Also note that if the file <i>does</i> exist, this will overwrite it without asking for permission!
</li>
<li><code>python hacksekhmet.py | tee hacksekhmetoutput.txt</code><br />
Piping (<b>pipe</b> is what the <code>|</code> is called) your command's output to <code>tee</code> also redirects your command's output to the file you give it. The key difference is that it <i>also</i> still outputs it to the CLI. This way you can keep an eye on the progress but still also have the output in a file for later.
</li>
<li>Either way, you should get a file that has contents that look a lot like this:<br />
<image src="/images/sekhmetbrute.png"></image></li>
</ul>
<li>Find some magical way to search through the output</li>
<ul>
<li>Remember our friend <code>grep</code>? Use that to search for <b>success</b> in the file <b>hacksekhmetoutput.txt</b>:<br />
<pre>└─$ grep success hackout.txt<br />
... no output here! ...</pre>
</li>
<li>Adjust to make sure you search case <b>insensitively</b> as Mafdet suggested:<br />
<pre>└─$ grep -i success hackout.txt<br /> 
       SucCeSS - *sekhmet-9051* is right. B64 decode:</pre><br />
</li>
<li>We found it! Kind of? It seems like there might be something on the next line or something, so adjust for that again using the <code>-A</code> parameter:<br />
<pre>└─$ grep -i success hackout.txt -A1 
       SucCeSS - *sekhmet-9051* is right. B64 decode:  
       bWFmZGV0eW91cHVuaw==</pre><br />
</li>
<li>More work?! Who put this thing together?! By now, you're a pro at identifying and decoding base64 strings right?<br />
<pre>└─$ hURL -b bWFmZGV0eW91cHVuaw==

Original string       :: bWFmZGV0eW91cHVuaw==
base64 DEcoded string :: mafdetyoupunk</pre>
</li>
</ul>
</ul>
</span>
</details>]]></content><author><name>GitHub User</name><email>your-email@domain.com</email></author><category term="thehaxthatrocksthecradle" /><summary type="html"><![CDATA[Level 31 - The Cat’s Out of the Net Tinytina’s alter-ego, Crunkbunny is now offering a way for you to get a mysterious cat’s creds.]]></summary></entry><entry><title type="html">The Hax that Rocks the Cradle Encoding and Decoding</title><link href="http://localhost:4000/thehaxthatrocksthecradle/2022/08/26/thehaxthatrocksthecradle_encoding_decoding.html" rel="alternate" type="text/html" title="The Hax that Rocks the Cradle Encoding and Decoding" /><published>2022-08-26T17:19:23-05:00</published><updated>2022-08-26T17:19:23-05:00</updated><id>http://localhost:4000/thehaxthatrocksthecradle/2022/08/26/thehaxthatrocksthecradle_encoding_decoding</id><content type="html" xml:base="http://localhost:4000/thehaxthatrocksthecradle/2022/08/26/thehaxthatrocksthecradle_encoding_decoding.html"><![CDATA[<p>We’re going to shift focus now and look at some encoding and decoding of data, with a couple hash-related things thrown in.</p>

<p>First, maybe some quick explanations are in order if you haven’t run across these terms before. These are intended to be super quick and simple explanations. Entire books can be written about each of these topics!</p>

<h1 id="encoding-and-decoding">Encoding and Decoding</h1>
<p>Encoding data transforms it into another form. The reasons for doing so can vary, but the important part for you to know right now is that if you know how data is encoded, it is easily decoded. No further information is needed.
Typically, if you take a small piece of data (like one word, for example) and encode it, the result is also very small. Likewise, if you take a super long piece of data (like a book), the result will be similarly long.</p>

<h1 id="hashing">Hashing</h1>
<p>Hashing also transforms data, but a key difference is that it cannot be reversed … well, not directly anyway. Even if you know the algorithm used, you can’t really take a hash and figure out what the data was originally. What you CAN do hash a piece of data, see if it matches your hash, and if it doesn’t, try another piece of data and so on. Sound like a lot of effort? It can be, but for computers, it can go very quickly, depending on the algorithm used.
How about hash length? It’s always consistent! A hash created using the MD5 algorithm will be 32 characters. 
Hash a single letter? 32 characters. 
Hash a 10 GB file? 32 characters.</p>

<h1 id="encryption-and-decryption">Encryption and Decryption</h1>
<p>Like encoding, encryption also transforms data into another form.
Like encoding, the length of the output also depends on the length of the input.
So what’s the difference? One major difference for users is that even if you know the algorithm used, you still need a <em>key</em> (think of it like a password - because in many cases, it is one!) to decrypt the data.</p>

<h1 id="level-23---what-does-it-mean-when-people-say-its-all-ones-and-zeroes">Level 23 - What Does it Mean When People Say “It’s All ones and zeroes?”</h1>
<p>Let’s help Gimli out with this decoding task, the poor guy. He does the best he can.</p>

<details>
<summary>Level 23 - Hint</summary>

<br />
<span style="color:DodgerBlue">
Remember that Gimli mentioned a few things:
bai'nairee to ah'skee (sound it out and look it up if they seem familiar!)
Cyberchef
</span>
</details>
<p><br /></p>
<details>
<summary>Level 23 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
This one would be tricky if you haven't heard these terms before - I blame the dwarf's accent (which apparently shows up in writing, oddly enough):<br />
bai'nairee = binary<br />
ah'skee = ASCII = American Standard Code for Information Interchange<br />
<br />
ASCII uses numbers to represent characters - pretty much all the characters you see on the face of a standard keyboard have an ASCII number assigned to them.<br />
<br />
CyberChef - An online search for "CyberChef" should lead you to: <a href="https://cyberchef.org">https://cyberchef.org</a><br />
<br />
The interface can be a bit confusing at first, but (among other things) CyberChef lets you convert data from one type to another quickly and easily if you know how the data is encoded.<br />
In our case, we need to convert information <b>from binary</b> to readable text, so either type "binary" in the search field at the top left, or navigate to Data Format &gt; From Binary on the left:<br />
<img src="/images/cyberchef_frombinary.png" /><br />
<br />
Drag the box containing the words "From Binary" to the "Recipe" box in the center column.<br />
<img src="/images/cyberchef_addrecipe.png" /><br />
<br />
Paste the binary data into the "Input" box at the top right and check the "Output" box:<br />
<img src="/images/cyberchef_converted.png" /><br />
<br />
<br />
Too easy? Want to know how did CyberChef do this? Like tedious things? Read on!!!<br />
8 binary bits (8 numbers) = one byte = one character<br />
So, all we need to do is break up the binary string into bytes, each made up of 8 ones/zeros. So:<br />
<code>011110100110000101101110011001010011101001101110011011110111010001100001011100000111001101111001011000110110100001101111</code><br />
becomes:<br />

	<table>
		<thead>
			<tr>
				<th>byte</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>01111010</td>
			</tr>
			<tr>
				<td>01100001</td>
			</tr>
			<tr>
				<td>01101110</td>
			</tr>
			<tr>
				<td>01100101</td>
			</tr>
			<tr>
				<td>00111010</td>
			</tr>
			<tr>
				<td>01101110</td>
			</tr>
			<tr>
				<td>01101111</td>
			</tr>
			<tr>
				<td>01110100</td>
			</tr>
			<tr>
				<td>01100001</td>
			</tr>
			<tr>
				<td>01110000</td>
			</tr>
			<tr>
				<td>01110011</td>
			</tr>
			<tr>
				<td>01111001</td>
			</tr>
			<tr>
				<td>01100011</td>
			</tr>
			<tr>
				<td>01101000</td>
			</tr>
			<tr>
				<td>01101111</td>
			</tr>
		</tbody>
	</table>

<br />
Now for each byte, calculate out the binary to decimal conversion:<br />
	<table>
		<thead>
			<tr>
				<th>byte</th>
				<th>decimal value</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>01111010</td>
				<td>122</td>
			</tr>
			<tr>
				<td>01100001</td>
				<td>97</td>
			</tr>
			<tr>
				<td>01101110</td>
				<td>110</td>
			</tr>
			<tr>
				<td>01100101</td>
				<td>101</td>
			</tr>
			<tr>
				<td>00111010</td>
				<td>58</td>
			</tr>
			<tr>
				<td>01101110</td>
				<td>110</td>
			</tr>
			<tr>
				<td>01101111</td>
				<td>111</td>
			</tr>
			<tr>
				<td>01110100</td>
				<td>116</td>
			</tr>
			<tr>
				<td>01100001</td>
				<td>97</td>
			</tr>
			<tr>
				<td>01110000</td>
				<td>112</td>
			</tr>
			<tr>
				<td>01110011</td>
				<td>115</td>
			</tr>
			<tr>
				<td>01111001</td>
				<td>121</td>
			</tr>
			<tr>
				<td>01100011</td>
				<td>99</td>
			</tr>
			<tr>
				<td>01101000</td>
				<td>104</td>
			</tr>
			<tr>
				<td>01101111</td>
				<td>111</td>
			</tr>
		</tbody>
	</table>
<br />
Remember how I mentioned that each character on a standard keyboard has an ASCII number assigned to it? Now we get to look that up! One easy way to do so from a Linux system (and you're just getting so good at Linux that you might as well do it that way), is to type <code>man ascii</code> since the <code>ascii</code> manual has that chart in it:
<img src="/images/man_ascii.png" /><br />
<br />
Now, all you need to do is look up each decimal number and find the corresponding character! So fun!<br />
	<table>
		<thead>
			<tr>
				<th>byte</th>
				<th>decimal value</th>
				<th>ASCII value</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>01111010</td>
				<td>122</td>
				<td>z</td>
			</tr>
			<tr>
				<td>01100001</td>
				<td>97</td>
				<td>a</td>
			</tr>
			<tr>
				<td>01101110</td>
				<td>110</td>
				<td>n</td>
			</tr>
			<tr>
				<td>01100101</td>
				<td>101</td>
				<td>e</td>
			</tr>
			<tr>
				<td>00111010</td>
				<td>58</td>
				<td>:</td>
			</tr>
			<tr>
				<td>01101110</td>
				<td>110</td>
				<td>n</td>
			</tr>
			<tr>
				<td>01101111</td>
				<td>111</td>
				<td>o</td>
			</tr>
			<tr>
				<td>01110100</td>
				<td>116</td>
				<td>t</td>
			</tr>
			<tr>
				<td>01100001</td>
				<td>97</td>
				<td>a</td>
			</tr>
			<tr>
				<td>01110000</td>
				<td>112</td>
				<td>p</td>
			</tr>
			<tr>
				<td>01110011</td>
				<td>115</td>
				<td>s</td>
			</tr>
			<tr>
				<td>01111001</td>
				<td>121</td>
				<td>y</td>
			</tr>
			<tr>
				<td>01100011</td>
				<td>99</td>
				<td>c</td>
			</tr>
			<tr>
				<td>01101000</td>
				<td>104</td>
				<td>h</td>
			</tr>
			<tr>
				<td>01101111</td>
				<td>111</td>
				<td>o</td>
			</tr>
		</tbody>
	</table>

</span>
</details>
<p><br /></p>
<h1 id="level-24---casting-a-hex-on-a-target">Level 24 - Casting a Hex on a Target</h1>
<p>Zane has a new challenge for us!</p>

<details>
<summary>Level 24 - Hint</summary>

<br />
<span style="color:DodgerBlue">
Look up "base 16" online, hopefully you should find something referring to hexadecimal. Follow that lead!<br />
</span>
</details>
<p><br /></p>
<details>
<summary>Level 24 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
If you look up hexadecimal, or checked out the Full Answer for Level 23 above, you may have seen that hexadecimal (or hex for short) values can also be looked up on the ASCII table for characters!<br />
<br />
Your choices are to either:<br />
<ul>
<li>Look up the hex values in the ASCII table (<code>man ascii</code>, remember?) one by one and match them up to the letters</li>
<li>Use CyberChef to convert the string you're given from hex to readable letters.</li>
</ul>
<br />
Listen, I'm not one to judge how you spend your time, so I'll leave the decision up to you! Still, it's worth converting at least a few character manually to see how this conversion works!
</span>
</details>
<p><br /></p>
<h1 id="level-25---get-used-to-seeing-this">Level 25 - Get Used to Seeing This==</h1>
<p>Fl4k has a new type of encoding scheme for us to interact with. This one is very commonly used, so pay attention to how it’s decoded, and how to recognize data encoded like this!!</p>

<details>
<summary>Level 25 - Hint</summary>

<br />
<span style="color:DodgerBlue">
Your hint from Fl4k was "base(16*4)". Your math teacher would be disappointed if you couldn't multiply that out to: "base64". I could see the look on their face now ...<br />
<br />
</span>
</details>
<p><br /></p>
<details>
<summary>Level 25 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
Remember the CyberChef! Just check for the "From Base64" recipe and use that!<br />
<br />
Fl4k did mention another way though, installing hURL!<br />
First, check if you have it installed by typing <code>hURL</code> - pay attention to the goofy capitalization!<br />
If you get something like this:<br />
<pre>
└─$ hurl    
Command 'hURL' not found, but can be installed with:
sudo apt install hurl
Do you want to install it? (N/y)
</pre>
You need to install using the command they suggest using. Pay attention to the capitalization again. Yes, I know it's different from the command capitalization. Just go with it!<br />
If you don't have admin ("sudo" or "root" in Linux) rights on the Kali system you're using, you can't install it. In that case, just use CyberChef and then read on to get an idea for how the CLI tool hURL would work.<br />
<br />
To install hURL, run:<br />
<code>sudo apt update &amp;&amp; sudo apt install hurl</code><br />
<br />
Now running <code>hURL</code> should bring up the <code>hURL</code> help menu:<br />
<pre>
└─$ hurl
.::[ hURL - hexadecimal &amp; URL (en/de)coder ]::.
v2.1 @COPYLEFT  -&gt;  fnord0 &lt;at&gt; riseup &lt;dot&gt; net

  USAGE: /usr/bin/hURL [ -flag|--flag ] [ -f &lt;file1&gt;,&lt;file2&gt; ] [ string ]

  COMMAND LINE ARGUMENTS
   -M|--menu    =&gt; Menu-driven GUI               ;  /usr/bin/hURL -M
   -U|--URL     =&gt; URL encode                    ;  /usr/bin/hURL -U "hello world"
   -u|--url     =&gt; uRL decode                    ;  /usr/bin/hURL -u "hello%20world"
...
...
</pre>
<br />
Look for the "base64 decode" option in the help menu and the example they give:<br />
<code>   -b|--base64  =&gt; base64 decode                 ;  /usr/bin/hURL -b "aGVsbG8gd29ybGQ="</code><br />
<br />
Copy that syntax, but replace their base64 string with the one you got from Fl4k and you should get something like:
<pre>
└─$ hURL -b "YW1hcmE6aXRjaGluZ2ZvcmFmaWdodA=="

Original string       :: YW1hcmE6aXRjaGluZ2ZvcmFmaWdodA==
base64 DEcoded string :: amara:itchingforafight
</pre>
<br />
</span>
</details>
<p><br /></p>
<h1 id="level-26---you-are-really-gonna-love-this">Level 26 - You Are Really Gonna Love This</h1>
<p>Amara needs help decoding a set of credentials. This encoding scheme is also common. Chances are, you’ve seen it in use already.</p>

<details>
<summary>Level 26 - Hint</summary>

<br />
<span style="color:DodgerBlue">
Amara's hint, "You are Elle" - sounded out, would be ... URL!<br />
See where some research about URL encoding/decoding can get you! Remember the tools you've already used so far and check their documentation.<br />
<br />
</span>
</details>
<p><br /></p>
<details>
<summary>Level 26 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
URL decoding is actually a bit easier than some other types of decoding! A lot of characters will typically remain unchanged in a URL decoded string (things like numbers, letters, etc.). When it comes to punctuation though? All bets are off!
Here are some examples:
	<table>
		<thead>
			<tr>
				<th>Normal Character</th>
				<th>Encoded Character</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>space</td>
				<td>%20</td>
			</tr>
			<tr>
				<td>%</td>
				<td>%25</td>
			</tr>			<tr>
				<td>&amp;</td>
				<td>%26</td>
			</tr>			<tr>
				<td>+</td>
				<td>%2B</td>
			</tr>			<tr>
				<td>/</td>
				<td>%2F</td>
			</tr>			<tr>
				<td>=</td>
				<td>%3D</td>
			</tr>			<tr>
				<td>?</td>
				<td>%3F</td>
			</tr>			<tr>
				<td>@</td>
				<td>%40</td>
			</tr>
        </tbody>
    </table>
<br />
URLs may use encoding like this so that, for example, stuff like slashes in a URL don't get interpreted by your browser as a directory indicator.<br />
<br />
Armed with knowledge, I'm sure you were like "Oh, well, clearly, I can just use CyberChef or hURL to decode this!":<br />
<br />
<b>CyberChef:</b><br />
Just follow the previous CyberChef instructions in Level 23, but use the <b>URL decode</b> recipe.<br />
<br />
<b>hURL</b><br />
<pre>
└─$ hURL -u moze%3Athe%20%23%20of%20grenades%20I%20carry%20is%20%3E%2020

Original    :: moze%3Athe%20%23%20of%20grenades%20I%20carry%20is%20%3E%2020
URL DEcoded :: moze:the # of grenades I carry is &gt; 20
</pre>
<br />
<b>Manually</b>
Oh? Those methods were too easy and you want to do it manually?<br />
<ul>
<li>Check out <code>man ascii</code> again.</li>
<li>Those number codes for URL encoding (%xx) are just the 2 character hex value for the character with a % in front of it.</li>
<li>You can use the ASCII chart to find the characters that are represented by each URL encoded section in that string!</li>
</ul>
</span>
</details>
<p><br /></p>
<h1 id="level-27---the-flip-side-encoding">Level 27 - The Flip-Side: Encoding</h1>
<p>Moze got a username, but needs you to encode something in order to get the password!</p>

<details>
<summary>Level 27 - Hint</summary>

<br />
<span style="color:DodgerBlue">
Check out the options in the tools you've used so far!<br />
</span>
</details>
<p><br /></p>
<details>
<summary>Level 27 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
<b>CyberChef:</b><br />
Use the <b>To Base64</b> recipe!<br />
<br />
<b>hURL</b><br />
<pre>
└─$ hurl -B stillworkingonmysocialskills                                

Original       :: stillworkingonmysocialskills
base64 ENcoded :: c3RpbGx3b3JraW5nb25teXNvY2lhbHNraWxscw==
</pre>
<br />
</span>
</details>
<p><br /></p>
<h1 id="level-28---breakfast-potatoes">Level 28 - Breakfast Potatoes</h1>
<p>Tannis needs your help to get claptrap’s password. Get ready to make hash browns! Or maybe just a hash.</p>

<details>
<summary>Level 28 - Hint</summary>

<br />
<span style="color:DodgerBlue">
Check out the options in the tools you've used so far! (I know, it's a copy/paste of the last hint, but I can't help it if it's still relevant!)<br />
</span>
</details>
<p><br /></p>
<details>
<summary>Level 28 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
<b>CyberChef:</b><br />
Use the <b>MD5</b> recipe!<br />
Note that there isn't a From MD5 option for this like there is for stuff like Base64. Why is that, anyway? Hmm ...<br />
<br />
<b>hURL</b><br />
<pre>
└─$ hurl -m VR-0N1CA

Original   :: VR-0N1CA
MD5 digest :: 29046555bd2ca0ac79506a8f41127503
</pre>
<br />
</span>
</details>
<p><br /></p>
<h1 id="level-29---un-potatoing">Level 29 - Un-Potatoing</h1>
<p>Claptrap - the nerve of this robot. Still, since you’ve decided to be a hacker-for-hire for everyone, you might as well see if you can … un-hashify something for him.</p>

<details>
<summary>Level 29 - Hint</summary>

<br />
<span style="color:DodgerBlue">
Check out the options in the tools you've used so far! **snicker, snicker**<br />
<br />
Ok, once you've done that and found that it didn't really work, maybe try looking up online what claptrap mentioned in his note.
</span>
</details>
<p><br /></p>
<details>
<summary>Level 29 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
The tools you've been using so far won't work here. Why is that? You can't reverse the hash the way you can reverse encoding.<br />
<br />
What you CAN do is look up hashes! How? Here's how ...<br />
Let's say someone said you had to figure out which single lower-case letter hashes out to:
<code>b2f5ff47436671b6e533d8dc3614845d</code>.<br />
<br />
Ok, you can't reverse the hash like you can a base64 string. You can, however, hash all the letters in the alphabet:<br />
<pre>
a - 0cc175b9c0f1b6a831c399e269772661
b - 92eb5ffee6ae2fec3ad71c777531578f
c - 4a8a08f09d37b73795649038408b5f33
d - 8277e0910d750195b448797616e091ad
e - e1671797c52e15f763380b45e841ec32
f - 8fa14cdd754f91cc6554c9e71929cce7
g - b2f5ff47436671b6e533d8dc3614845d
</pre>
<br />
Hey! We got a match at <b>g</b>! We successfully did an MD5 hash lookup.<br />
<br />
For this challenge though, tinytina's password is the hash for a whole word! How do we do that?<br />
It's simple, just take an English dictionary, or perhaps a password list. List out all the words individually and make a table that contains the words and their hashes. Then compare the thousands of hashes one by one to the hash you were given! Oooh, fun!<br />
Or ...<br />
See if someone has already done the work of creating the hash table for you, and provides a convenient website where you look up the hash! Yeah, let's do that.<br />
<br />
There are several sites you can use for this. They seem to spring up, die out, or become paid/ad-filled services all the time, so you may need to use a different one depending on when you are reading this.<br />
<br />
As of today, one option is: <a href="https://www.cmd5.org">https://www.cmd5.org</a>.
The interface is pretty minimal, just paste in your hash, click the "decrypt" button, and kablam (literally, in this case):<br />
<img src="/images/cmd5.png" /><br />
</span>
</details>
<p><br /></p>
<h1 id="level-30---layers">Level 30 - Layers</h1>
<p>Tinytina needs help unraveling a mystery here, great ready for some multi-step action again!</p>

<details>
<summary>Level 30 - Hint</summary>

<br />
<span style="color:DodgerBlue">
For the username, just use some OSINT.<br />
<br />
For the password, just remember the tools we've used so far, and be ready to use them a few times.
</span>
</details>
<p><br /></p>
<details>
<summary>Level 30 - Full Answer</summary>

<br />
<span style="color:MediumSeaGreen">
For the username, use the hints Tinytina gave you and just do an online search:<br />
<img src="/images/crunkbunny.png" /><br />
<br />
Remember that it should be all lowercase and one word when you use it as the username!<br />
<br />
For the password:<br />
First, let's tackle the base64 layers.<br />
<b>CyberChef:</b><br />
Use the <b>From Base64</b> recipe like before, but 3 times!<br />
<img src="/images/cyberchef_multi.png" /><br />
<br />
<b>hURL</b><br />
Just run hURL on the string you were given. Run it again on the result, and one more time on that result:<br />
<img src="/images/hurl_multi.png" /><br />
<br />
At this point, whether you used hURL or CyberChef, you're left with an MD5 hash, which you can recognize by its 32 character length and only using character used to count in hexadecimal (0-9 and a-f):<br />
<code>8800b005829650f3ee6f8744b5b2466e</code><br />
<br />
Do an online lookup for this hash like before and you should get:<br />
<code>badaboom</code><br />

</span>
</details>
<p><br /></p>]]></content><author><name>GitHub User</name><email>your-email@domain.com</email></author><category term="thehaxthatrocksthecradle" /><summary type="html"><![CDATA[We’re going to shift focus now and look at some encoding and decoding of data, with a couple hash-related things thrown in.]]></summary></entry><entry><title type="html">The Hax that Rocks the Cradle Intro</title><link href="http://localhost:4000/thehaxthatrocksthecradle/2022/08/26/thehaxthatrocksthecradle_intro.html" rel="alternate" type="text/html" title="The Hax that Rocks the Cradle Intro" /><published>2022-08-26T17:19:23-05:00</published><updated>2022-08-26T17:19:23-05:00</updated><id>http://localhost:4000/thehaxthatrocksthecradle/2022/08/26/thehaxthatrocksthecradle_intro</id><content type="html" xml:base="http://localhost:4000/thehaxthatrocksthecradle/2022/08/26/thehaxthatrocksthecradle_intro.html"><![CDATA[<p>Welcome to The Hax that Rocks the Cradle!</p>

<h1 id="what-is-this-anyway">What Is This Anyway?</h1>
<p>The purpose of this intentionally vulnerable VM is to help you get used to some security related concepts while learning Linux stuff along the way.</p>

<p>The first few challenges are web related. Nothing in depth, but you’ll need to be able to browse to the victim host and use both your browser and a tool or two to enumerate the site.</p>

<p>After those initial web related stages, we’ll delve into the Linux CLI (command line interface) for the rest of your time here! It can be intimidating at first, leaving the comfort of a graphical environment. Hopefully by the time you’re done, you will have used a lot of basic CLI commands so much that it won’t be nearly so intimidating.</p>

<h1 id="who-is-this-for">Who is This For?</h1>
<p>The target audience is anyone who is interested in learning a bit more about security and about Linux (specifically the CLI).
The guide will assume you know how to use a computer, look stuff up online, and open a terminal window, and … that’s mostly it. There will be clues inside the VM itself, and you’ll be filled in on more here if you need it.</p>

<h1 id="what-do-you-need">What Do You Need?</h1>
<p>An “attacking machine” that is preferably Linux, preferably Kali or Parrot. While not strictly required, this will make using (and possibly installing) the needed tools easier.</p>

<p>New to VMs? Check this out:</p>

<p>If <strong>not</strong> using Kali or Parrot, you’ll need to able to use or install:</p>
<ul>
  <li>nmap</li>
  <li>Web directory brute forcer</li>
  <li>SSH client</li>
  <li>base64 decoder (or use one online)</li>
  <li>Code editor with Python support (or just a text editor if you want to go old school)</li>
  <li>SSH brute forcer</li>
  <li>cewl - or another tool that makes a wordlist based on site contents</li>
  <li>hashcat - or another password cracking tool and one that can mangle wordlists</li>
</ul>

<p>Kind of a lot of things, right? If that list seems daunting … just use Kali or Parrot, one step at a time!</p>

<p><img src="/images/testscreen.png" alt="screen" /></p>

<p>Test</p>]]></content><author><name>GitHub User</name><email>your-email@domain.com</email></author><category term="thehaxthatrocksthecradle" /><summary type="html"><![CDATA[Welcome to The Hax that Rocks the Cradle!]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2022/08/26/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2022-08-26T17:19:23-05:00</published><updated>2022-08-26T17:19:23-05:00</updated><id>http://localhost:4000/jekyll/update/2022/08/26/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2022/08/26/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>GitHub User</name><email>your-email@domain.com</email></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>